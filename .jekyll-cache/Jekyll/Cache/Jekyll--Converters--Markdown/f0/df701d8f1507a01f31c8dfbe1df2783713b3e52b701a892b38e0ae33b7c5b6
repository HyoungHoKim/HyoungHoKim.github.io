I"P<p>프로그래머스 코딩테스트 연습문제입니다. 이해력이 조금 필요한 문제입니다. 정렬을 해서 경우를 따지면 좀 더 쉽게 이해할 수 있습니다. 어렵지 않게 풀 수 있으나 예외를 찾는데 시간이 많이 걸렸습니다. 0으로 나눠지는 경우를 따로 처리해줘야 테스트 케이스를 모두 통과할 수 있습니다.</p>

<h4 id="문제-설명">문제 설명</h4>
<h3 id="실패율">실패율</h3>

<p>슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.</p>

<p>이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 오렐리를 위해 실패율을 구하는 코드를 완성하라.</p>

<p>실패율은 다음과 같이 정의한다.
스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.</p>

<h4 id="제한사항">제한사항</h4>
<ul>
  <li>스테이지의 개수 N은 1 이상 500 이하의 자연수이다.</li>
  <li>stages의 길이는 1 이상 200,000 이하이다.</li>
  <li>stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.</li>
  <li>각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.</li>
  <li>단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.</li>
  <li>만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.</li>
  <li>스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.</li>
</ul>

<h3 id="풀이">풀이</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

vector&lt;int&gt; solution(int N, vector&lt;int&gt; stages) {
    vector&lt;int&gt; answer;
    vector&lt;float&gt; fRatio;

    sort(stages.begin(), stages.end());

    for(int i = 1; i &lt;= N; i++){

        float clearNum = stages.size();
        float nonClearNum = 0;

        for(int j = 0; j &lt; stages.size(); j++){
            if(stages[j] &lt; i) clearNum--;
            else if(stages[j] == i) nonClearNum++;
            else break;
        }

        if(clearNum == 0) fRatio.push_back(0);
        else fRatio.push_back(nonClearNum/clearNum);
    }

    for(int i = 0; i &lt; N; i++){

        int max = 0;
        int j = 0;

        for(; j &lt; N; j++){

            if(fRatio[j] == -1) continue;
            else{
                if(fRatio[max] &lt; fRatio[j]) max = j;
            }
        }

        answer.push_back(max + 1);
        fRatio[max] = -1;
    }

    return answer;
}

// 많은 사람들이 pair를 사용해서 많이 풀어서 제가 보기에 가장 인상 깊었던 풀이법을 하나 남깁니다.

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;
bool compare(pair&lt;double, int&gt; a, pair&lt;double, int&gt; b)
{
    if (a.first &gt; b.first)
        return true;
    else if (a.first &lt; b.first)
        return false;
    else
        return a.second &lt; b.second;
}
vector&lt;int&gt; solution(int N, vector&lt;int&gt; stages)
{
    vector&lt;int&gt; answer;
    vector&lt;pair&lt;int, int&gt;&gt; failAll(N + 2); //실패한사람, 도달한사람
    vector&lt;pair&lt;double, int&gt;&gt; fail_rate(N + 1); //실패율, 번호
    for (int i = 1; i &lt;= stages.size(); i++)
    {
        int stg = stages[i - 1];
        for (int i = 1; i &lt;= stg; i++)
        {
            failAll[i].second += 1;
            if (i == stg)
                failAll[i].first += 1;
        }
    }

    for (int i = 1; i &lt; N+1; i++)
    {
        fail_rate[i - 1].first = (double)failAll[i].first / failAll[i].second;
        fail_rate[i - 1].second = i;
    }

    sort(fail_rate.begin(), fail_rate.end()-1, compare);

    for (int i = 0; i &lt; N; i++)
    {
        //cout &lt;&lt; fail_rate[i].first &lt;&lt;", "&lt;&lt; fail_rate[i].second &lt;&lt; endl;
        answer.push_back(fail_rate[i].second);
    }
    return answer;
}

</code></pre></div></div>
:ET