I" <p>프로그래머스 코딩테스트 연습문제입니다. 문제 이해를 잘못해서 3번이나 다시 푼 문제입니다. 문제를 좀 더 주의깊게 보고 풀어야겠습니다. 반성의 의미로 앞서 푼 코드도 같이 올립니다.</p>

<h3 id="문제-설명">문제 설명</h3>
<p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>

<ol>
  <li>인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</li>
  <li>나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</li>
  <li>그렇지 않으면 J를 인쇄합니다.
예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.</li>
</ol>

<p>내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.</p>

<p>현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="제한사항">제한사항</h3>
<ul>
  <li>현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.</li>
  <li>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.</li>
  <li>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.</li>
</ul>

<h3 id="풀이">풀이</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 첫번째 풀이_우선순위대로 처리후 0번 인덱스부터 처리하는 것으로 이해

#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

bool compare(pair&lt;int, int&gt; a, pair&lt;int, int&gt; b){
    return a.second &lt; b.second;
}

int solution(vector&lt;int&gt; priorities, int location) {
    int answer = 0;
    pair&lt;int, int&gt; ref = make_pair(location, priorities[location]);
    vector&lt;pair&lt;int, int&gt;&gt; temp;
    vector&lt;pair&lt;int, int&gt;&gt;::iterator iter;

    for(int i = 0; i &lt; priorities.size(); i++){
        temp.push_back(pair&lt;int, int&gt;(i, priorities[i]));
    }

    for(int i = 1; i &lt;= priorities.size(); i++){

        iter = max_element(temp.begin(), temp.end(), compare);

        if(iter-&gt;first == ref.first
           &amp;&amp; iter-&gt;second == ref.second) answer = i;

        temp.erase(iter);       
    }

    return answer;
}

// 두번째 풀이_처리 후 0번 인덱스로 가지 않고 처리한 인덱스부터 연산  

#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;stack&gt;

using namespace std;

int solution(vector&lt;int&gt; priorities, int location) {
    int answer = 1;
    stack&lt;pair&lt;int, int&gt;&gt; s;
    int len = priorities.size();
    int idx = 0;
    pair&lt;int, int&gt; max(0, 0);

    while(priorities.size() &gt; 0){

        for(int i = 0; i &lt; priorities.size(); i++){

            if(idx &gt;= priorities.size()) idx = 0;

            if(priorities[idx] &gt; max.second){
                max.first = idx;
                max.second = priorities[idx];
            }

            idx++;
        }

        if(max.first == location){
            return answer;
        }else answer++;

        priorities.erase(priorities.begin() + max.first);
        idx = max.first;
        max.second = 0;
    }

    return answer;
}

// 맞은 풀이_문제에 나온대로 가장 높은 우선순위가 아니면 뒤로 보내고 맞으면 처리
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

bool compare(pair&lt;int, int&gt; a, pair&lt;int, int&gt; b){
    return a.second &lt; b.second;
}

int solution(vector&lt;int&gt; priorities, int location) {
    int answer = 0;
    vector&lt;pair&lt;int, int&gt;&gt;::iterator iter;
    vector&lt;pair&lt;int, int&gt;&gt; savePos;

    for(int i = 0; i &lt; priorities.size(); i++){
        savePos.push_back(pair&lt;int, int&gt;(i, priorities[i]));
    }


    while(savePos.size() &gt; 0){

        iter = max_element(savePos.begin(), savePos.end(), compare);

        if(savePos[0].second == iter-&gt;second){
            answer++;

            if(savePos[0].first == location) return answer;
            else savePos.erase(savePos.begin());
        }else{
            pair&lt;int, int&gt; temp = savePos[0];

            for(int i = 1; i &lt; savePos.size(); i++){
                savePos[i - 1] = savePos[i];
            }

            savePos[savePos.size() - 1] = temp;
        }        
    }

    return answer;
}
</code></pre></div></div>
:ET